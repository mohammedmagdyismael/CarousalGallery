{"version":3,"sources":["CarousalGallery/CarousalBanners.style.js","CarousalGallery/CarousalBanners.js","App.js","serviceWorker.js","index.js"],"names":["ItemImage","styled","img","props","small","GalleryContainer","div","Container","ItemContainer","displacement","GalleryTabs","Tab","active","CarousalBanners","swapImagesTabs","transformDisplacement","tabId","setState","state","ImagesURL","id","this","map","image","src","index","onClick","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+RAIaA,EAAYC,IAAOC,IAAG,yGAGvB,SAAAC,GAAK,OAAEA,EAAMC,MAAQ,OAAS,UAC5B,SAAAD,GAAK,OAAEA,EAAMC,MAAQ,OAAS,WAG9BC,EAAmBJ,IAAOK,IAAG,0DAI9BC,EAAYN,IAAOK,IAAG,kfA4BtBE,EAAgBP,IAAOK,IAAG,+dAGxB,SAAAH,GAAK,OAAEA,EAAMC,MAAQ,eAAiB,UAKvC,SAAAD,GAAK,OAAEA,EAAMC,MAAQ,OAAS,UAC/B,SAAAD,GAAK,OAAEA,EAAMC,MAAQ,OAAO,UAEvB,SAAAD,GAAK,2BAAiBA,EAAMM,aAAY,SAY5CC,EAAcT,IAAOK,IAAG,uIAOxBK,EAAMV,IAAOK,IAAG,uLAOhB,SAAAH,GAAK,OAAEA,EAAMS,OAAS,oBAAsB,oBAC3C,SAAAT,GAAK,OAAEA,EAAMS,OAAS,SCnBtBC,EApDM,kDACjB,WAAYV,GAAO,IAAD,EAWb,OAXa,qBACd,cAAMA,IAaVW,eAAiB,SAACC,EAAuBC,GACjC,EAAKC,SAAS,CACVR,aAAaM,EACbC,MAAQA,KAfhB,EAAKE,MAAQ,CACTT,aAAa,EACbO,MAAQ,QACRG,UAAU,CACN,4EACA,8EACA,6EACA,+EAEP,EAsCJ,OArCA,mCAUD,WAAS,IAAD,OACJ,OACA,kBAACd,EAAgB,KACb,kBAACE,EAAS,CAACa,GAAG,aAENC,KAAKH,MAAMC,UAAUG,KAAI,SAACC,GACtB,OACI,kBAACf,EAAa,CAACY,GAAG,cAAcX,aAAc,EAAKS,MAAMT,cACrD,kBAACT,EAAS,CAAEwB,IAAKD,SAMrC,kBAACb,EAAW,KAEJW,KAAKH,MAAMC,UAAUG,KAAI,SAACC,EAAME,GAC5B,OACI,kBAACd,EAAG,CAACC,OAAQ,EAAKM,MAAMF,QAAK,cAAYS,GAAUC,QAAS,kBAAI,EAAKZ,eAAqB,IAANW,EAAU,OAAD,OAAQA,MACjG,kBAACzB,EAAS,CAACY,OAAQ,EAAKM,MAAMF,QAAK,cAAYS,GAASrB,OAAK,EAACoB,IAAKD,cAQ9F,EAlDgB,CAASI,IAAMC,WCGrBC,G,MATH,SAAH,GAAc,qCACnB,OACI,6BACI,kBAAC,EAAe,SCKRC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAG,MAAKC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8c6036f1.chunk.js","sourcesContent":["import styled from 'styled-components'\n\n\n  \nexport const ItemImage = styled.img`\n  width : 100%;\n  border-radius: 5px;\n  height: ${props=>props.small ? '82px' : '100%'};\n  /* width: ${props=>props.small ? '75px' : '550px'}; */\n`;\n\n export const GalleryContainer = styled.div`\n    display: inline-block; \n `;\n\nexport const Container = styled.div`\n::-webkit-scrollbar { \n        display: none; \n      }\n  width: 652px;\n  height: 397px;\n  border-radius: 5px;\n\n  position: relative;\n  margin: auto;\n  display: flex; \n   \n  scroll-snap-type: y mandatory;\n\n  flex-direction: row-reverse; \n    overflow: auto;  \n    flex: 1;\n    scroll-snap-align: start;\n \n    flex-shrink: 0; \n    transform-origin: center center;\n    transform: scale(1);\n    transition: transform 0.5s;\n    position: relative;  \n\n`;\n\n\nexport const ItemContainer = styled.div`\n \n    scroll-snap-align: start;\n    display: ${props=>props.small ? 'inline-block' : 'flex'};;\n    flex-direction: column; \n    border-radius: 10px;\n    box-shadow: 0px 2px 2px 0px #dcdada;\n    margin: 0px 0px 0px 0px;\n    height: ${props=>props.small ? '60px' : '100%' };\n    width: ${props=>props.small ? '60px':'100%' };\n    cursor : pointer;\n    transform : ${props=> `translateX(${props.displacement}%)`};\n    transition : transform 0.5s;\n  \n    flex-shrink: 0;\n     \n    transform-origin: center center;\n \n    position: relative; \n    justify-content: center;\n    align-items: center;\n`;\n\n export const GalleryTabs = styled.div`\n    display: flex;\n    flex-direction: row-reverse;\n    height: 100px;\n    padding: 10px 0px 0px 0px;\n `;\n\n export const Tab = styled.div`\n    display: inline-block;\n    width: 155px;\n    height: 82px;\n    border-radius: 5px;\n    margin: 0px 5px;\n\n    border: ${props=>props.active ? 'solid 1px #0070cd' : 'solid 1px #fff'} ;\n    padding: ${props=>props.active ? '1px' : '1px'} ;\n `;","import React from 'react'\nimport {\n    ItemImage,\n    ItemContainer, \n    Container,\n    GalleryContainer,\n    GalleryTabs,\n    Tab\n} from './CarousalBanners.style'\n\nclass CarousalBanners extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = { \n            displacement:0,\n            tabId : 'tab_0',\n            ImagesURL:[\n                'https://cdn.pixabay.com/photo/2019/11/10/16/47/nature-4616282_960_720.jpg',\n                'https://cdn.pixabay.com/photo/2019/11/08/09/27/panorama-4610864_960_720.jpg',\n                'https://cdn.pixabay.com/photo/2019/11/07/20/50/camping-4609879_960_720.jpg',\n                'https://cdn.pixabay.com/photo/2019/11/07/20/42/camping-4609863_960_720.jpg'\n            ]\n        }\n    }\n\n    swapImagesTabs = (transformDisplacement, tabId)=>{ \n            this.setState({\n                displacement:transformDisplacement,\n                tabId : tabId\n            }) \n    }\n\n\n    render(){\n        return(\n        <GalleryContainer>\n            <Container id='container'>\n                {\n                    this.state.ImagesURL.map((image)=>{\n                        return(\n                            <ItemContainer id='galleryitem' displacement={this.state.displacement}>\n                                <ItemImage  src={image}/> \n                            </ItemContainer>\n                        )\n                    })\n                }\n            </Container> \n            <GalleryTabs>\n                {\n                    this.state.ImagesURL.map((image,index)=>{\n                        return(\n                            <Tab active={this.state.tabId === `tab_${index}`}  onClick={()=>this.swapImagesTabs(index*100,`tab_${index}`)}>\n                                <ItemImage active={this.state.tabId === `tab_${index}`} small src={image}/> \n                            </Tab>  \n                        )\n                    })\n                }\n            </GalleryTabs>\n        </GalleryContainer>\n        )\n    }\n}\nexport default CarousalBanners","import React from 'react';\nimport CarousalGallery from './CarousalGallery';\nimport './App.css'\n\nconst App = ({ ...props }) => {\n    return (\n        <div>\n            <CarousalGallery />\n         </div>\n                \n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}